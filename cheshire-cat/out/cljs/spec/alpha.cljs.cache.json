["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",["~$cat","~$*","~$or","~$merge","~$keys","~$+","~$and","~$def"]],"~:name","~$cljs.spec.alpha","~:imports",null,"~:requires",["^ ","~$cljs.core","^A","~$gobj","~$goog.object","^C","^C","~$walk","~$clojure.walk","~$gen","~$cljs.spec.gen.alpha","~$c","^A","~$str","~$clojure.string","^I","^I","^E","^E","^G","^G"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$->t_cljs$spec$alpha1119",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:anonymous",true,"~:protocols",["^6",["~$cljs.spec.alpha/Spec","~$cljs.core/IMeta","~$cljs.spec.alpha/Specize","~$cljs.core/IWithMeta"]],"~:skip-protocol-flag",["^6",["^S","^U"]],"~:factory","~:positional","~:arglists",["~#list",["~$quote",["^Z",[["~$form","~$mmvar","~$retag","~$gfn","~$id","~$predx","~$dval","~$tag","~$meta1120"]]]]],"~:doc","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1119.","~:file",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha1119","^1:","out/cljs/spec/alpha.cljs","~:method-params",["^Z",[["^10","^11","^12","^13","^14","^15","^16","^17","^18"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^P",true,"~:column",6,"~:variadic?",false,"^W","^X","~:line",556,"~:ret-tag","~$cljs.spec.alpha/t_cljs$spec$alpha1119","~:max-fixed-arity",9,"~:fn-var",true,"^Y",["^Z",["^[",["^Z",[["^10","^11","^12","^13","^14","^15","^16","^17","^18"]]]]],"^V",["^6",["^S","^U"]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1119."],"^10",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",181,"^1?",7,"~:end-line",181,"~:end-column",11,"^Y",["^Z",["^[",["^Z",[["~$spec"]]]]],"^19","returns the spec as data"],"^=","~$cljs.spec.alpha/form","^1:","out/cljs/spec/alpha.cljs","^1G",11,"^1<",["^Z",[["^1H"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",181,"^1B","~$any","^1F",181,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H"]]]]],"^19","returns the spec as data"],"~$nilable-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1407,"^1?",19,"^1F",1407,"^1G",31,"~:skip-wiki",true,"^Y",["^Z",["^[",["^Z",[["^10","~$pred","^13"]]]]],"^19","Do not call this directly, use 'nilable'"],"^=","~$cljs.spec.alpha/nilable-impl","^1:","out/cljs/spec/alpha.cljs","^1G",31,"^1<",["^Z",[["^10","^1M","^13"]]],"^1=",null,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1407,"^1B","~$cljs.spec.alpha/t_cljs$spec$alpha1435","^1F",1407,"^1D",3,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^10","^1M","^13"]]]]],"^19","Do not call this directly, use 'nilable'"],"~$*recursion-limit*",["^ ","^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",21,"^1?",16,"^1F",21,"^1G",33,"~:dynamic",true],"^=","~$cljs.spec.alpha/*recursion-limit*","^1:","out/cljs/spec/alpha.cljs","^1G",33,"^1?",1,"^1Q",true,"^1A",21,"^1F",21,"~:tag","~$number","^19","A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."],"~$*coll-error-limit*",["^ ","^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",35,"^1?",16,"^1F",35,"^1G",34,"^1Q",true],"^=","~$cljs.spec.alpha/*coll-error-limit*","^1:","out/cljs/spec/alpha.cljs","^1G",34,"^1?",1,"^1Q",true,"^1A",35,"^1F",35,"^1S","^1T","^19","The number of errors reported by explain in a collection spec'ed with 'every'"],"~$empty-coll",["^ ","^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",841,"^1?",16,"^1F",841,"^1G",26,"~:private",true],"^1X",true,"^=","~$cljs.spec.alpha/empty-coll","^1:","out/cljs/spec/alpha.cljs","^1G",26,"^1?",1,"^1A",841,"^1F",841,"^1S","~$cljs.core/IMap"],"~$->t_cljs$spec$alpha1226",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^10","~$max-count","~$check?","^13","~$gen-max","^1M","~$cpred","~$conform-keys","~$kind-form","~$addcv","~$p__1223","~$cfns","~$describe-form","~$distinct","^1H","~$kfn","~$gen-into","~$count","~$min-count","~$opts","~$kind","~$conform-all","~$map__1224","~$conform-into","~$meta1227"]]]]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1226.","^1:",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha1226","^1:","out/cljs/spec/alpha.cljs","^1<",["^Z",[["^10","^20","^21","^13","^22","^1M","^23","^24","^25","^26","^27","^28","^29","^2:","^1H","^2;","^2<","^2=","^2>","^2?","^2@","^2A","^2B","^2C","^2D"]]],"^1=",null,"^1>",["^Z",[null,null]],"^P",true,"^1?",6,"^1@",false,"^W","^X","^1A",881,"^1B","~$cljs.spec.alpha/t_cljs$spec$alpha1226","^1D",25,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^10","^20","^21","^13","^22","^1M","^23","^24","^25","^26","^27","^28","^29","^2:","^1H","^2;","^2<","^2=","^2>","^2?","^2@","^2A","^2B","^2C","^2D"]]]]],"^V",["^6",["^S","^U"]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1226."],"~$explain-printer",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",235,"^1?",7,"^1F",235,"^1G",22,"^Y",["^Z",["^[",["^Z",[["~$ed"]]]]],"^19","Default printer for explain-data. nil indicates a successful validation."],"^=","~$cljs.spec.alpha/explain-printer","^1:","out/cljs/spec/alpha.cljs","^1G",22,"^1<",["^Z",[["^2H"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",235,"^1B","~$clj-nil","^1F",235,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^2H"]]]]],"^19","Default printer for explain-data. nil indicates a successful validation."],"~$op-explain",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1159,"^1?",8,"^1F",1159,"^1G",18,"^1X",true,"^Y",["^Z",["^[",["^Z",[["^10","~$p","~$path","~$via","~$in","~$input"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/op-explain","^1:","out/cljs/spec/alpha.cljs","^1G",18,"^1<",["^Z",[["^10","~$p","^2L","^2M","^2N","^2O"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1159,"^1B",["^6",["~$cljs.core/IVector","^1J","^2J"]],"^1F",1159,"^1D",6,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^10","~$p","^2L","^2M","^2N","^2O"]]]]]],"~$Specize",["^ ","^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",131,"^1?",14,"^1F",131,"^1G",21,"~:protocol-symbol",true,"~:jsdoc",["^Z",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$specize*",[["~$_"],["~$_","^10"]]]]],"^2S",true,"^=","^T","^1:","out/cljs/spec/alpha.cljs","^1G",21,"^1?",1,"^1A",131,"^2U",["^ ","^2V",["^ ","^2W",[["~$_"],["~$_","^10"]]]],"~:info",null,"^1F",131,"^1S","^1J","~:impls",["^6",["~$cljs.spec.alpha/t_cljs$spec$alpha1407","~$cljs.spec.alpha/t_cljs$spec$alpha1133","~$cljs.spec.alpha/t_cljs$spec$alpha1200","~$cljs.spec.alpha/t_cljs$spec$alpha1052","~$cljs.core/Keyword","~$cljs.spec.alpha/t_cljs$spec$alpha1108","~$cljs.spec.alpha/t_cljs$spec$alpha1214","^1C","~$default","~$cljs.spec.alpha/t_cljs$spec$alpha1400","~$cljs.spec.alpha/t_cljs$spec$alpha1142","^1O","~$cljs.core/PersistentHashSet","~$cljs.core/PersistentTreeSet","~$cljs.core/Symbol","^2F","~$cljs.spec.alpha/t_cljs$spec$alpha1432"]],"^2T",["^Z",["@interface"]]],"~$alt-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1044,"^1?",19,"^1F",1044,"^1G",27,"^1L",true,"^Y",["^Z",["^[",["^Z",[["~$ks","~$ps","~$forms"]]]]],"^19","Do not call this directly, use 'alt'"],"^=","~$cljs.spec.alpha/alt-impl","^1:","out/cljs/spec/alpha.cljs","^1G",27,"^1<",["^Z",[["^3=","^3>","^3?"]]],"^1=",null,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1044,"^1B",["^6",["~$clj","^1J"]],"^1F",1044,"^1D",3,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^3=","^3>","^3?"]]]]],"^19","Do not call this directly, use 'alt'"],"~$tagged-ret",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",656,"^1?",8,"^1F",656,"^1G",18,"^1X",true,"^Y",["^Z",["^[",["^Z",[["^17","~$ret"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/tagged-ret","^1:","out/cljs/spec/alpha.cljs","^1G",18,"^1<",["^Z",[["^17","^3C"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",656,"^1B","~$cljs.core/MapEntry","^1F",656,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^17","^3C"]]]]]],"~$pvalid?",["^ ","^N",null,"^O",["^ ","^1X",true,"^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1G",15,"~:top-fn",["^ ","^1@",false,"~:fixed-arity",3,"^1D",3,"^1<",["^Z",[["^1M","~$x"],["^1M","~$x","^10"]]],"^Y",["^Z",[["^1M","~$x"],["^1M","~$x","^10"]]],"^1>",["^Z",[null,null]]],"^1?",8,"^1A",380,"^1F",380,"^Y",["^Z",["^[",["^Z",[["^1M","~$x"],["^1M","~$x","^10"]]]]],"^19","internal helper function that returns true when x is valid for spec."],"^1X",true,"^=","~$cljs.spec.alpha/pvalid?","^1:","out/cljs/spec/alpha.cljs","^1G",15,"^3G",["^ ","^1@",false,"^3H",3,"^1D",3,"^1<",["^Z",[["^1M","~$x"],["^1M","~$x","^10"]]],"^Y",["^Z",[["^1M","~$x"],["^1M","~$x","^10"]]],"^1>",["^Z",[null,null]]],"^1<",["^Z",[["^1M","~$x"],["^1M","~$x","^10"]]],"^1=",null,"^3H",3,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^2V",[["^ ","^3H",2,"^1@",false,"^1S","~$boolean"],["^ ","^3H",3,"^1@",false,"^1S","^3J"]],"^1A",380,"^1F",380,"^1D",3,"^1E",true,"^Y",["^Z",[["^1M","~$x"],["^1M","~$x","^10"]]],"^19","internal helper function that returns true when x is valid for spec."],"~$def-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",306,"^1?",19,"^1F",306,"^1G",27,"^1L",true,"^Y",["^Z",["^[",["^Z",[["~$k","^10","^1H"]]]]],"^19","Do not call this directly, use 'def'"],"^=","~$cljs.spec.alpha/def-impl","^1:","out/cljs/spec/alpha.cljs","^1G",27,"^1<",["^Z",[["~$k","^10","^1H"]]],"^1=",null,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",306,"^1F",306,"^1D",3,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$k","^10","^1H"]]]]],"^19","Do not call this directly, use 'def'"],"~$*explain-out*",["^ ","^=","~$cljs.spec.alpha/*explain-out*","^1:","out/cljs/spec/alpha.cljs","^1A",262,"^1?",1,"^1F",262,"^1G",29,"^1Q",true,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",262,"^1?",16,"^1F",262,"^1G",29,"^1Q",true]],"~$->t_cljs$spec$alpha1432",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^1H","~$meta1433"]]]]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1432.","^1:",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha1432","^1:","out/cljs/spec/alpha.cljs","^1<",["^Z",[["^1H","^3P"]]],"^1=",null,"^1>",["^Z",[null,null]],"^P",true,"^1?",5,"^1@",false,"^W","^X","^1A",1391,"^1B","^3;","^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","^3P"]]]]],"^V",["^6",["^S","^U"]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1432."],"~$->t_cljs$spec$alpha1142",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^:","^3?","~$preds","^13","^14","~$kps","~$specs","~$cform","~$meta1143"]]]]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1142.","^1:",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha1142","^1:","out/cljs/spec/alpha.cljs","^1<",["^Z",[["^:","^3?","^3S","^13","^14","^3T","^3U","^3V","^3W"]]],"^1=",null,"^1>",["^Z",[null,null]],"^P",true,"^1?",5,"^1@",false,"^W","^X","^1A",697,"^1B","^37","^1D",9,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^:","^3?","^3S","^13","^14","^3T","^3U","^3V","^3W"]]]]],"^V",["^6",["^S","^U"]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1142."],"~$*runtime-asserts*",["^ ","^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1479,"^1?",3,"^1F",1479,"^1G",20,"^1X",true,"^1Q",true],"^1X",true,"^=","~$cljs.spec.alpha/*runtime-asserts*","^1:","out/cljs/spec/alpha.cljs","^1G",20,"^1?",1,"^1Q",true,"^1A",1477,"^1F",1479,"^1S","^3J"],"~$regex-spec-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1291,"^1?",19,"^1F",1291,"^1G",34,"^1L",true,"^Y",["^Z",["^[",["^Z",[["~$re","^13"]]]]],"^19","Do not call this directly, use 'spec' with a regex op argument"],"^=","~$cljs.spec.alpha/regex-spec-impl","^1:","out/cljs/spec/alpha.cljs","^1G",34,"^1<",["^Z",[["^40","^13"]]],"^1=",null,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1291,"^1B","^36","^1F",1291,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^40","^13"]]]]],"^19","Do not call this directly, use 'spec' with a regex op argument"],"~$merge-spec-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",813,"^1?",19,"^1F",813,"^1G",34,"^1L",true,"^Y",["^Z",["^[",["^Z",[["^3?","^3S","^13"]]]]],"^19","Do not call this directly, use 'merge'"],"^=","~$cljs.spec.alpha/merge-spec-impl","^1:","out/cljs/spec/alpha.cljs","^1G",34,"^1<",["^Z",[["^3?","^3S","^13"]]],"^1=",null,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",813,"^1B","^34","^1F",813,"^1D",3,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^3?","^3S","^13"]]]]],"^19","Do not call this directly, use 'merge'"],"~$explain-data*",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",219,"^1?",7,"^1F",219,"^1G",20,"^Y",["^Z",["^[",["^Z",[["^1H","^2L","^2M","^2N","~$x"]]]]]],"^=","~$cljs.spec.alpha/explain-data*","^1:","out/cljs/spec/alpha.cljs","^1G",20,"^1<",["^Z",[["^1H","^2L","^2M","^2N","~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",219,"^1B",["^6",["^1Z","^2J"]],"^1F",219,"^1D",5,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","^2L","^2M","^2N","~$x"]]]]]],"~$t_cljs$spec$alpha1119",["^ ","~:num-fields",9,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^1C","^1:","out/cljs/spec/alpha.cljs","~:type",true,"^P",true,"^1?",6,"^1A",556,"~:record",false,"^1S","~$function","^V",["^6",["^S","^U"]]],"~$add-ret",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1110,"^1?",8,"^1F",1110,"^1G",15,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$p","~$r","~$k"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/add-ret","^1:","out/cljs/spec/alpha.cljs","^1G",15,"^1<",["^Z",[["~$p","~$r","~$k"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1110,"^1B",["^6",[null,"^3A","^1J"]],"^1F",1110,"^1D",3,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$p","~$r","~$k"]]]]]],"~$explain-pred-list",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",738,"^1?",8,"^1F",738,"^1G",25,"^1X",true,"^Y",["^Z",["^[",["^Z",[["^3?","^3S","^2L","^2M","^2N","~$x"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/explain-pred-list","^1:","out/cljs/spec/alpha.cljs","^1G",25,"^1<",["^Z",[["^3?","^3S","^2L","^2M","^2N","~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",738,"^1B",["^6",["^2Q","^1J","^2J"]],"^1F",738,"^1D",6,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^3?","^3S","^2L","^2M","^2N","~$x"]]]]]],"~$MAX_INT",["^ ","^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",19,"^1?",14,"^1F",19,"^1G",21,"~:const",true],"^=","~$cljs.spec.alpha/MAX_INT","^1:","out/cljs/spec/alpha.cljs","^1G",21,"~:const-expr",["^ ","~:op","^4@","~:val",9007199254740991,"~:env",["^ ","~:context","~:expr"],"~:form",9007199254740991,"^1S","^1T"],"^1?",1,"^4@",true,"^1A",19,"^1F",19,"^1S","^1T"],"~$check-asserts",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1487,"^1?",7,"^1F",1487,"^1G",20,"^Y",["^Z",["^[",["^Z",[["~$flag"]]]]],"^19","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"^=","~$cljs.spec.alpha/check-asserts","^1:","out/cljs/spec/alpha.cljs","^1G",20,"^1<",["^Z",[["^4J"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1487,"^1F",1487,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^4J"]]]]],"^19","Enable or disable spec asserts that have been compiled\nwith '*compile-asserts*' true.  See 'assert'.\nInitially set to boolean value of cljs.spec.alpha/*runtime-asserts*.\nDefaults to false."],"~$alt2",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1042,"^1?",8,"^1F",1042,"^1G",12,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$p1","~$p2"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/alt2","^1:","out/cljs/spec/alpha.cljs","^1G",12,"^1<",["^Z",[["^4M","^4N"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1042,"^1B",["^6",[null,"^1J","^1Z","^2J"]],"^1F",1042,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^4M","^4N"]]]]]],"~$and-k-gen",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",417,"^1?",8,"^1F",417,"^1G",17,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$s"]]]]],"^19","returns a tuple generator made up of generators for every element\n  in s."],"^1X",true,"^=","~$cljs.spec.alpha/and-k-gen","^1:","out/cljs/spec/alpha.cljs","^1G",17,"^1<",["^Z",[["~$s"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",417,"^1B","^1J","^1F",417,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$s"]]]]],"^19","returns a tuple generator made up of generators for every element\n  in s."],"~$assert*",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1495,"^1?",7,"^1F",1495,"^1G",14,"^Y",["^Z",["^[",["^Z",[["^1H","~$x"]]]]],"^19","Do not call this directly, use 'assert'."],"^=","~$cljs.spec.alpha/assert*","^1:","out/cljs/spec/alpha.cljs","^1G",14,"^1<",["^Z",[["^1H","~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1495,"^1F",1495,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","~$x"]]]]],"^19","Do not call this directly, use 'assert'."],"~$fn-sym",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",123,"^1?",8,"^1F",123,"^1G",14,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$f-n"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/fn-sym","^1:","out/cljs/spec/alpha.cljs","^1G",14,"^1<",["^Z",[["^4U"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",123,"^1B",["^6",["^1J","^3:","^2J"]],"^1F",123,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^4U"]]]]]],"~$inst-in-range?",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1442,"^1?",7,"^1F",1442,"^1G",21,"^Y",["^Z",["^[",["^Z",[["~$start","~$end","~$inst"]]]]],"^19","Return true if inst at or after start and before end"],"^=","~$cljs.spec.alpha/inst-in-range?","^1:","out/cljs/spec/alpha.cljs","^1G",21,"^1<",["^Z",[["^4X","^4Y","^4Z"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1442,"^1B","^3J","^1F",1442,"^1D",3,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^4X","^4Y","^4Z"]]]]],"^19","Return true if inst at or after start and before end"],"~$registry-ref",["^ ","^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",47,"^1?",20,"^1F",47,"^1G",32,"^1X",true],"^1X",true,"^=","~$cljs.spec.alpha/registry-ref","^1:","out/cljs/spec/alpha.cljs","^1G",32,"^1?",1,"^1A",47,"^1F",47,"^1S","~$cljs.core/Atom"],"~$accept?",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",979,"^1?",8,"^1F",979,"^1G",15,"^1X",true,"^Y",["^Z",["^[",["^Z",[[["^ ","~:keys",["~:cljs.spec.alpha/op"]]]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/accept?","^1:","out/cljs/spec/alpha.cljs","^1G",15,"^1<",["^Z",[["~$p__1275"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",979,"^1B","^3J","^1F",979,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^54",["^55"]]]]]]]],"~$t_cljs$spec$alpha1226",["^ ","^47",25,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^2F","^1:","out/cljs/spec/alpha.cljs","^48",true,"^P",true,"^1?",6,"^1A",881,"^49",false,"^1S","^4:","^V",["^6",["^S","^U"]]],"~$t_cljs$spec$alpha1108",["^ ","^47",6,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^33","^1:","out/cljs/spec/alpha.cljs","^48",true,"^P",true,"^1?",6,"^1A",520,"^49",false,"^1S","^4:","^V",["^6",["^S","^U"]]],"~$and-spec-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",749,"^1?",19,"^1F",749,"^1G",32,"^1L",true,"^Y",["^Z",["^[",["^Z",[["^3?","^3S","^13"]]]]],"^19","Do not call this directly, use 'and'"],"^=","~$cljs.spec.alpha/and-spec-impl","^1:","out/cljs/spec/alpha.cljs","^1G",32,"^1<",["^Z",[["^3?","^3S","^13"]]],"^1=",null,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",749,"^1B","^30","^1F",749,"^1D",3,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^3?","^3S","^13"]]]]],"^19","Do not call this directly, use 'and'"],"~$accept",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",977,"^1?",8,"^1F",977,"^1G",14,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/accept","^1:","out/cljs/spec/alpha.cljs","^1G",14,"^1<",["^Z",[["~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",977,"^1B","^1Z","^1F",977,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]]],"~$recur-limit?",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",351,"^1?",8,"^1F",351,"^1G",20,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$rmap","^14","^2L","~$k"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/recur-limit?","^1:","out/cljs/spec/alpha.cljs","^1G",20,"^1<",["^Z",[["^5?","^14","^2L","~$k"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",351,"^1B","^3J","^1F",351,"^1D",4,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^5?","^14","^2L","~$k"]]]]]],"~$t_cljs$spec$alpha1214",["^ ","^47",4,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^34","^1:","out/cljs/spec/alpha.cljs","^48",true,"^P",true,"^1?",3,"^1A",816,"^49",false,"^1S","^4:","^V",["^6",["^S","^U"]]],"~$describe*",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",45,"^1?",4,"^1F",45,"^1G",13,"~:protocol","^R","^19",null,"^Y",["^Z",["^[",["^Z",[["^1H"]]]]]],"^5C","^R","^=","~$cljs.spec.alpha/describe*","^1:","out/cljs/spec/alpha.cljs","^1G",13,"^1<",["^Z",[["^1H"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",39,"^1B","^1J","^1F",45,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H"]]]]],"^19",null],"~$map-spec-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",423,"^1?",19,"^1F",423,"^1G",32,"^1L",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^54",["~$req-un","~$opt-un","~$keys-pred","~$pred-exprs","~$opt-keys","~$req-specs","~$req","~$req-keys","~$opt-specs","~$pred-forms","~$opt","^13"],"~:as","~$argm"]]]]]],"^19","Do not call this directly, use 'spec' with a map argument"],"^=","~$cljs.spec.alpha/map-spec-impl","^1:","out/cljs/spec/alpha.cljs","^1G",32,"^1<",["^Z",[["~$p__1049"]]],"^1=",null,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",423,"^1B","^31","^1F",423,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[[["^ ","^54",["^5F","^5G","^5H","^5I","^5J","^5K","^5L","^5M","^5N","^5O","^5P","^13"],"^5Q","^5R"]]]]]],"^19","Do not call this directly, use 'spec' with a map argument"],"~$->t_cljs$spec$alpha1435",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^10","^1M","^13","^1H","~$meta1436"]]]]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1435.","^1:",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha1435","^1:","out/cljs/spec/alpha.cljs","^1<",["^Z",[["^10","^1M","^13","^1H","^5V"]]],"^1=",null,"^1>",["^Z",[null,null]],"^P",true,"^1?",5,"^1@",false,"^W","^X","^1A",1411,"^1B","^1O","^1D",5,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^10","^1M","^13","^1H","^5V"]]]]],"^V",["^6",["^S","^U"]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1435."],"~$reg-resolve!",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",66,"^1?",8,"^1F",66,"^1G",20,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$k"]]]]],"^19","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"^1X",true,"^=","~$cljs.spec.alpha/reg-resolve!","^1:","out/cljs/spec/alpha.cljs","^1G",20,"^1<",["^Z",[["~$k"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",66,"^1B",["^6",[null,"^1J"]],"^1F",66,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$k"]]]]],"^19","returns the spec/regex at end of alias chain starting with k, throws if not found, k if k not ident"],"~$->t_cljs$spec$alpha1108",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^10","^1M","^13","~$cpred?","~$unc","~$meta1109"]]]]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1108.","^1:",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha1108","^1:","out/cljs/spec/alpha.cljs","^1<",["^Z",[["^10","^1M","^13","^5[","^60","^61"]]],"^1=",null,"^1>",["^Z",[null,null]],"^P",true,"^1?",6,"^1@",false,"^W","^X","^1A",520,"^1B","^33","^1D",6,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^10","^1M","^13","^5[","^60","^61"]]]]],"^V",["^6",["^S","^U"]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1108."],"~$re-explain",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1265,"^1?",8,"^1F",1265,"^1G",18,"^1X",true,"^Y",["^Z",["^[",["^Z",[["^2L","^2M","^2N","^40","^2O"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/re-explain","^1:","out/cljs/spec/alpha.cljs","^1G",18,"^1<",["^Z",[["^2L","^2M","^2N","^40","^2O"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1265,"^1B",["^6",["^2Q","^1J","^2J"]],"^1F",1265,"^1D",5,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^2L","^2M","^2N","^40","^2O"]]]]]],"~$alts",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1041,"^1?",8,"^1F",1041,"^1G",12,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$&","^3>"]]]]],"^3G",["^ ","^1@",true,"^3H",0,"^1D",0,"^1<",[["^Z",["^3>"]]],"^Y",["^Z",[["~$&","^3>"]]],"^1>",["^Z",[null]]]],"^1X",true,"^=","~$cljs.spec.alpha/alts","^1:","out/cljs/spec/alpha.cljs","^1G",12,"^3G",["^ ","^1@",true,"^3H",0,"^1D",0,"^1<",[["^Z",["^3>"]]],"^Y",["^Z",[["~$&","^3>"]]],"^1>",["^Z",[null]]],"^1<",[["^Z",["^3>"]]],"^1=",null,"^3H",0,"^1>",["^Z",[null]],"^1?",1,"^1@",true,"^2V",[["^ ","^3H",0,"^1@",true,"^1S",["^6",["^1J","^1Z","^2J"]]]],"^1A",1041,"^1B","^1J","^1F",1041,"^1D",0,"^1E",true,"^Y",["^Z",[["~$&","^3>"]]]],"~$with-name",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",85,"^1?",8,"^1F",85,"^1G",17,"^1X",true,"^Y",["^Z",["^[",["^Z",[["^1H","~$name"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/with-name","^1:","out/cljs/spec/alpha.cljs","^1G",17,"^1<",["^Z",[["^1H","^68"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",85,"^1B",["^6",["^3A","^1J","^32","^3:","~$cljs.core/MetaFn","^2J"]],"^1F",85,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","^68"]]]]]],"~$explain",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",270,"^1?",7,"^1F",270,"^1G",14,"^Y",["^Z",["^[",["^Z",[["^1H","~$x"]]]]],"^19","Given a spec and a value that fails to conform, prints an explanation to *out*."],"^=","~$cljs.spec.alpha/explain","^1:","out/cljs/spec/alpha.cljs","^1G",14,"^1<",["^Z",[["^1H","~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",270,"^1B","^1J","^1F",270,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","~$x"]]]]],"^19","Given a spec and a value that fails to conform, prints an explanation to *out*."],"~$spec-name",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",93,"^1?",8,"^1F",93,"^1G",17,"^1X",true,"^Y",["^Z",["^[",["^Z",[["^1H"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/spec-name","^1:","out/cljs/spec/alpha.cljs","^1G",17,"^1<",["^Z",[["^1H"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",93,"^1B",["^6",["^1J","^32","^3:","^2J"]],"^1F",93,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H"]]]]]],"~$map-spec",["^ ","^=","~$cljs.spec.alpha/map-spec","^1:","out/cljs/spec/alpha.cljs","^1A",335,"^1?",1,"^1F",335,"^1G",18,"~:declared",true,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",335,"^1?",10,"^1F",335,"^1G",18,"^6A",true]],"~$with-gen*",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",44,"^1?",4,"^1F",44,"^1G",13,"^5C","^R","^19",null,"^Y",["^Z",["^[",["^Z",[["^1H","^13"]]]]]],"^5C","^R","^=","~$cljs.spec.alpha/with-gen*","^1:","out/cljs/spec/alpha.cljs","^1G",13,"^1<",["^Z",[["^1H","^13"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",39,"^1B","^1J","^1F",44,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","^13"]]]]],"^19",null],"~$->t_cljs$spec$alpha1133",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^3?","^3S","^13","^3U","~$cnt","~$meta1134"]]]]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1133.","^1:",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha1133","^1:","out/cljs/spec/alpha.cljs","^1<",["^Z",[["^3?","^3S","^13","^3U","^6E","^6F"]]],"^1=",null,"^1>",["^Z",[null,null]],"^P",true,"^1?",6,"^1@",false,"^W","^X","^1A",600,"^1B","^2[","^1D",6,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^3?","^3S","^13","^3U","^6E","^6F"]]]]],"^V",["^6",["^S","^U"]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1133."],"~$k-gen",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",397,"^1?",8,"^1F",397,"^1G",13,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$f"]]]]],"^19","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"^1X",true,"^=","~$cljs.spec.alpha/k-gen","^1:","out/cljs/spec/alpha.cljs","^1G",13,"^1<",["^Z",[["~$f"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",397,"^1B",["^6",["^1J","^2J"]],"^1F",397,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$f"]]]]],"^19","returns a generator for form f, which can be a keyword or a list\n  starting with 'or or 'and."],"~$or-spec-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",659,"^1?",19,"^1F",659,"^1G",31,"^1L",true,"^Y",["^Z",["^[",["^Z",[["^:","^3?","^3S","^13"]]]]],"^19","Do not call this directly, use 'or'"],"^=","~$cljs.spec.alpha/or-spec-impl","^1:","out/cljs/spec/alpha.cljs","^1G",31,"^1<",["^Z",[["^:","^3?","^3S","^13"]]],"^1=",null,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",659,"^1B","^37","^1F",659,"^1D",4,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^:","^3?","^3S","^13"]]]]],"^19","Do not call this directly, use 'or'"],"~$specize",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",159,"^1?",8,"^1F",159,"^1G",15,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$s"],["~$s","^10"]]]]],"^3G",["^ ","^1@",false,"^3H",2,"^1D",2,"^1<",["^Z",[["~$s"],["~$s","^10"]]],"^Y",["^Z",[["~$s"],["~$s","^10"]]],"^1>",["^Z",[null,null]]]],"^1X",true,"^=","~$cljs.spec.alpha/specize","^1:","out/cljs/spec/alpha.cljs","^1G",15,"^3G",["^ ","^1@",false,"^3H",2,"^1D",2,"^1<",["^Z",[["~$s"],["~$s","^10"]]],"^Y",["^Z",[["~$s"],["~$s","^10"]]],"^1>",["^Z",[null,null]]],"^1<",["^Z",[["~$s"],["~$s","^10"]]],"^1=",null,"^3H",2,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^2V",[["^ ","^3H",1,"^1@",false,"^1S",["^6",[null,"^1J","^2J"]]],["^ ","^3H",2,"^1@",false,"^1S",["^6",[null,"^1J","^2J"]]]],"^1A",159,"^1F",159,"^1D",2,"^1E",true,"^Y",["^Z",[["~$s"],["~$s","^10"]]]],"~$*fspec-iterations*",["^ ","^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",27,"^1?",16,"^1F",27,"^1G",34,"^1Q",true],"^=","~$cljs.spec.alpha/*fspec-iterations*","^1:","out/cljs/spec/alpha.cljs","^1G",34,"^1?",1,"^1Q",true,"^1A",27,"^1F",27,"^1S","^1T","^19","The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"],"~$Spec",["^ ","^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",39,"^1?",14,"^1F",39,"^1G",18,"^2S",true,"^2T",["^Z",["@interface"]],"^2U",["^ ","^2V",["^ ","~$conform*",[["^1H","~$x"]],"~$unform*",[["^1H","~$y"]],"~$explain*",[["^1H","^2L","^2M","^2N","~$x"]],"~$gen*",[["^1H","~$overrides","^2L","^5?"]],"^6B",[["^1H","^13"]],"^5B",[["^1H"]]]]],"^2S",true,"^=","^R","^1:","out/cljs/spec/alpha.cljs","^1G",18,"^1?",1,"^1A",39,"^2U",["^ ","^2V",["^ ","^6Q",[["^1H","~$x"]],"^6R",[["^1H","~$y"]],"^6S",[["^1H","^2L","^2M","^2N","~$x"]],"^6T",[["^1H","^6U","^2L","^5?"]],"^6B",[["^1H","^13"]],"^5B",[["^1H"]]]],"^2X",null,"^1F",39,"^1S","^1J","^2Y",["^6",["^2Z","^2[","^30","^31","^33","^34","^1C","^36","^37","^1O","^2F","^3;"]],"^2T",["^Z",["@interface"]]],"~$unform",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",174,"^1?",7,"^1F",174,"^1G",13,"^Y",["^Z",["^[",["^Z",[["^1H","~$x"]]]]],"^19","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"^=","~$cljs.spec.alpha/unform","^1:","out/cljs/spec/alpha.cljs","^1G",13,"^1<",["^Z",[["^1H","~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",174,"^1B","^1J","^1F",174,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","~$x"]]]]],"^19","Given a spec and a value created by or compliant with a call to\n  'conform' with the same spec, returns a value with all conform\n   destructuring undone."],"~$valid?",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",371,"^1?",7,"^1F",371,"^1G",13,"^Y",["^Z",["^[",["^Z",[["^1H","~$x"],["^1H","~$x","^10"]]]]],"^19","Helper function that returns true when x is valid for spec.","^3G",["^ ","^1@",false,"^3H",3,"^1D",3,"^1<",["^Z",[["^1H","~$x"],["^1H","~$x","^10"]]],"^Y",["^Z",[["^1H","~$x"],["^1H","~$x","^10"]]],"^1>",["^Z",[null,null]]]],"^=","~$cljs.spec.alpha/valid?","^1:","out/cljs/spec/alpha.cljs","^1G",13,"^3G",["^ ","^1@",false,"^3H",3,"^1D",3,"^1<",["^Z",[["^1H","~$x"],["^1H","~$x","^10"]]],"^Y",["^Z",[["^1H","~$x"],["^1H","~$x","^10"]]],"^1>",["^Z",[null,null]]],"^1<",["^Z",[["^1H","~$x"],["^1H","~$x","^10"]]],"^1=",null,"^3H",3,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^2V",[["^ ","^3H",2,"^1@",false,"^1S","^3J"],["^ ","^3H",3,"^1@",false,"^1S","^3J"]],"^1A",371,"^1F",371,"^1D",3,"^1E",true,"^Y",["^Z",[["^1H","~$x"],["^1H","~$x","^10"]]],"^19","Helper function that returns true when x is valid for spec."],"~$->t_cljs$spec$alpha1400",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^40","^13","~$meta1401"]]]]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1400.","^1:",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha1400","^1:","out/cljs/spec/alpha.cljs","^1<",["^Z",[["^40","^13","^6["]]],"^1=",null,"^1>",["^Z",[null,null]],"^P",true,"^1?",3,"^1@",false,"^W","^X","^1A",1294,"^1B","^36","^1D",3,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^40","^13","^6["]]]]],"^V",["^6",["^S","^U"]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1400."],"^F",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",293,"^1?",7,"^1F",293,"^1G",10,"^Y",["^Z",["^[",["^Z",[["^1H"],["^1H","^6U"]]]]],"^19","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)","^3G",["^ ","^1@",false,"^3H",2,"^1D",2,"^1<",["^Z",[["^1H"],["^1H","^6U"]]],"^Y",["^Z",[["^1H"],["^1H","^6U"]]],"^1>",["^Z",[null,null]]]],"^=","~$cljs.spec.alpha/gen","^1:","out/cljs/spec/alpha.cljs","^1G",10,"^3G",["^ ","^1@",false,"^3H",2,"^1D",2,"^1<",["^Z",[["^1H"],["^1H","^6U"]]],"^Y",["^Z",[["^1H"],["^1H","^6U"]]],"^1>",["^Z",[null,null]]],"^1<",["^Z",[["^1H"],["^1H","^6U"]]],"^1=",null,"^3H",2,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^2V",[["^ ","^3H",1,"^1@",false,"^1S","^1J"],["^ ","^3H",2,"^1@",false,"^1S","^1J"]],"^1A",293,"^1F",293,"^1D",2,"^1E",true,"^Y",["^Z",[["^1H"],["^1H","^6U"]]],"^19","Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map spec names or paths (vectors of keywords) to no-arg\n  generator-creating fns. These will be used instead of the generators at those\n  names/paths. Note that parent generator (in the spec or overrides\n  map) will supersede those of any subtrees. A generator for a regex\n  op must always return a sequential collection (i.e. a generator for\n  s/? should return either an empty sequence/vector or a\n  sequence/vector with one item in it)"],"~$t_cljs$spec$alpha1435",["^ ","^47",5,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^1O","^1:","out/cljs/spec/alpha.cljs","^48",true,"^P",true,"^1?",5,"^1A",1411,"^49",false,"^1S","^4:","^V",["^6",["^S","^U"]]],"~$nonconforming",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1386,"^1?",7,"^1F",1386,"^1G",20,"^Y",["^Z",["^[",["^Z",[["^1H"]]]]],"^19","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"^=","~$cljs.spec.alpha/nonconforming","^1:","out/cljs/spec/alpha.cljs","^1G",20,"^1<",["^Z",[["^1H"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1386,"^1B","^3;","^1F",1386,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H"]]]]],"^19","takes a spec and returns a spec that has the same properties except\n  'conform' returns the original (not the conformed) value. Note, will specize regex ops."],"^6R",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",41,"^1?",4,"^1F",41,"^1G",11,"^5C","^R","^19",null,"^Y",["^Z",["^[",["^Z",[["^1H","~$y"]]]]]],"^5C","^R","^=","~$cljs.spec.alpha/unform*","^1:","out/cljs/spec/alpha.cljs","^1G",11,"^1<",["^Z",[["^1H","~$y"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",39,"^1B","^1J","^1F",41,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","~$y"]]]]],"^19",null],"~$->sym",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",323,"^1?",8,"^1F",323,"^1G",13,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]],"^19","Returns a symbol from a symbol or var"],"^1X",true,"^=","~$cljs.spec.alpha/->sym","^1:","out/cljs/spec/alpha.cljs","^1G",13,"^1<",["^Z",[["~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",323,"^1B",["^6",[null,"^1J"]],"^1F",323,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]],"^19","Returns a symbol from a symbol or var"],"~$abbrev",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",187,"^1?",7,"^1F",187,"^1G",13,"^Y",["^Z",["^[",["^Z",[["^10"]]]]]],"^=","~$cljs.spec.alpha/abbrev","^1:","out/cljs/spec/alpha.cljs","^1G",13,"^1<",["^Z",[["^10"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",187,"^1B",["^6",[null,"^1J","^3:"]],"^1F",187,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^10"]]]]]],"~$regex?",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",80,"^1?",7,"^1F",80,"^1G",13,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]],"^19","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"^=","~$cljs.spec.alpha/regex?","^1:","out/cljs/spec/alpha.cljs","^1G",13,"^1<",["^Z",[["~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",80,"^1B",["^6",[null,"^1J"]],"^1F",80,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]],"^19","returns x if x is a (cljs.spec.alpha) regex op, else logical false"],"~$or-k-gen",["^ ","^N",null,"^O",["^ ","^1X",true,"^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1G",16,"^3G",["^ ","^1@",false,"^3H",2,"^1D",2,"^1<",["^Z",[["~$s"],["^2>","~$s"]]],"^Y",["^Z",[["~$s"],["^2>","~$s"]]],"^1>",["^Z",[null,null]]],"^1?",8,"^1A",406,"^1F",406,"^Y",["^Z",["^[",["^Z",[["~$s"],["^2>","~$s"]]]]],"^19","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s."],"^1X",true,"^=","~$cljs.spec.alpha/or-k-gen","^1:","out/cljs/spec/alpha.cljs","^1G",16,"^3G",["^ ","^1@",false,"^3H",2,"^1D",2,"^1<",["^Z",[["~$s"],["^2>","~$s"]]],"^Y",["^Z",[["~$s"],["^2>","~$s"]]],"^1>",["^Z",[null,null]]],"^1<",["^Z",[["~$s"],["^2>","~$s"]]],"^1=",null,"^3H",2,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^2V",[["^ ","^3H",1,"^1@",false,"^1S","^1J"],["^ ","^3H",2,"^1@",false,"^1S","^1J"]],"^1A",406,"^1F",406,"^1D",2,"^1E",true,"^Y",["^Z",[["~$s"],["^2>","~$s"]]],"^19","returns a tuple generator made up of generators for a random subset\n  of min-count (default 0) to all elements in s."],"~$int-in-range?",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1449,"^1?",7,"^1F",1449,"^1G",20,"^Y",["^Z",["^[",["^Z",[["^4X","^4Y","~$val"]]]]],"^19","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"^=","~$cljs.spec.alpha/int-in-range?","^1:","out/cljs/spec/alpha.cljs","^1G",20,"^1<",["^Z",[["^4X","^4Y","^7?"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1449,"^1B",["^6",["^3J","^1J"]],"^1F",1449,"^1D",3,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^4X","^4Y","^7?"]]]]],"^19","Return true if start <= val, val < end and val is a fixed\n  precision integer."],"~$dt",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",358,"^1?",8,"^1F",358,"^1G",10,"^1X",true,"^Y",["^Z",["^[",["^Z",[["^1M","~$x","^10"],["^1M","~$x","^10","^5["]]]]],"^3G",["^ ","^1@",false,"^3H",4,"^1D",4,"^1<",["^Z",[["^1M","~$x","^10"],["^1M","~$x","^10","^5["]]],"^Y",["^Z",[["^1M","~$x","^10"],["^1M","~$x","^10","^5["]]],"^1>",["^Z",[null,null]]]],"^1X",true,"^=","~$cljs.spec.alpha/dt","^1:","out/cljs/spec/alpha.cljs","^1G",10,"^3G",["^ ","^1@",false,"^3H",4,"^1D",4,"^1<",["^Z",[["^1M","~$x","^10"],["^1M","~$x","^10","^5["]]],"^Y",["^Z",[["^1M","~$x","^10"],["^1M","~$x","^10","^5["]]],"^1>",["^Z",[null,null]]],"^1<",["^Z",[["^1M","~$x","^10"],["^1M","~$x","^10","^5["]]],"^1=",null,"^3H",4,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^2V",[["^ ","^3H",3,"^1@",false,"^1S","^1J"],["^ ","^3H",4,"^1@",false,"^1S",["^6",[null,"^1J","^32"]]]],"^1A",358,"^1F",358,"^1D",4,"^1E",true,"^Y",["^Z",[["^1M","~$x","^10"],["^1M","~$x","^10","^5["]]]],"~$preturn",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1074,"^1?",8,"^1F",1074,"^1G",15,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$p"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/preturn","^1:","out/cljs/spec/alpha.cljs","^1G",15,"^1<",["^Z",[["~$p"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1074,"^1B",["^6",[null,"^1J","^32","^3E","^2J"]],"^1F",1074,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$p"]]]]]],"~$re-conform",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1252,"^1?",8,"^1F",1252,"^1G",18,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$p",["~$x","~$&","~$xs","^5Q","~$data"]]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/re-conform","^1:","out/cljs/spec/alpha.cljs","^1G",18,"^1<",["^Z",[["~$p","~$p__1381"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1252,"^1B",["^6",[null,"^1J","^32","^3E","^2J"]],"^1F",1252,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$p",["~$x","~$&","^7F","^5Q","^7G"]]]]]]],"~$spec?",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",74,"^1?",7,"^1F",74,"^1G",12,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]],"^19","returns x if x is a spec object, else logical false"],"^=","~$cljs.spec.alpha/spec?","^1:","out/cljs/spec/alpha.cljs","^1G",12,"^1<",["^Z",[["~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",74,"^1B",["^6",[null,"^2J"]],"^1F",74,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$x"]]]]],"^19","returns x if x is a spec object, else logical false"],"~$registry",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",318,"^1?",7,"^1F",318,"^1G",15,"^Y",["^Z",["^[",["^Z",[[]]]]],"^19","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"^=","~$cljs.spec.alpha/registry","^1:","out/cljs/spec/alpha.cljs","^1G",15,"^1<",["^Z",[[]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",318,"^1B","^1J","^1F",318,"^1D",0,"^1E",true,"^Y",["^Z",["^[",["^Z",[[]]]]],"^19","returns the registry map, prefer 'get-spec' to lookup a spec by name"],"~$rep+impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1010,"^1?",19,"^1F",1010,"^1G",27,"^1L",true,"^Y",["^Z",["^[",["^Z",[["^10","~$p"]]]]],"^19","Do not call this directly, use '+'"],"^=","~$cljs.spec.alpha/rep+impl","^1:","out/cljs/spec/alpha.cljs","^1G",27,"^1<",["^Z",[["^10","~$p"]]],"^1=",null,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1010,"^1B",["^6",["^1J","^1Z","^2J"]],"^1F",1010,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^10","~$p"]]]]],"^19","Do not call this directly, use '+'"],"~$deriv",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1123,"^1?",8,"^1F",1123,"^1G",13,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$p","~$x"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/deriv","^1:","out/cljs/spec/alpha.cljs","^1G",13,"^1<",["^Z",[["~$p","~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1123,"^1B",["^6",[null,"^1J","^1Z","^2J"]],"^1F",1123,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$p","~$x"]]]]]],"~$deep-resolve",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",49,"^1?",8,"^1F",49,"^1G",20,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$reg","~$k"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/deep-resolve","^1:","out/cljs/spec/alpha.cljs","^1G",20,"^1<",["^Z",[["^7S","~$k"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",49,"^1F",49,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^7S","~$k"]]]]]],"~$exercise",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1433,"^1?",7,"^1F",1433,"^1G",15,"^Y",["^Z",["^[",["^Z",[["^1H"],["^1H","~$n"],["^1H","~$n","^6U"]]]]],"^19","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen","^3G",["^ ","^1@",false,"^3H",3,"^1D",3,"^1<",["^Z",[["^1H"],["^1H","~$n"],["^1H","~$n","^6U"]]],"^Y",["^Z",[["^1H"],["^1H","~$n"],["^1H","~$n","^6U"]]],"^1>",["^Z",[null,null,null]]]],"^=","~$cljs.spec.alpha/exercise","^1:","out/cljs/spec/alpha.cljs","^1G",15,"^3G",["^ ","^1@",false,"^3H",3,"^1D",3,"^1<",["^Z",[["^1H"],["^1H","~$n"],["^1H","~$n","^6U"]]],"^Y",["^Z",[["^1H"],["^1H","~$n"],["^1H","~$n","^6U"]]],"^1>",["^Z",[null,null,null]]],"^1<",["^Z",[["^1H"],["^1H","~$n"],["^1H","~$n","^6U"]]],"^1=",null,"^3H",3,"^1>",["^Z",[null,null,null]],"^1?",1,"^1@",false,"^2V",[["^ ","^3H",1,"^1@",false,"^1S","^1J"],["^ ","^3H",2,"^1@",false,"^1S","^1J"],["^ ","^3H",3,"^1@",false,"^1S","~$cljs.core/LazySeq"]],"^1A",1433,"^1F",1433,"^1D",3,"^1E",true,"^Y",["^Z",[["^1H"],["^1H","~$n"],["^1H","~$n","^6U"]]],"^19","generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen"],"~$explain-data",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",226,"^1?",7,"^1F",226,"^1G",19,"^Y",["^Z",["^[",["^Z",[["^1H","~$x"]]]]],"^19","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"^=","~$cljs.spec.alpha/explain-data","^1:","out/cljs/spec/alpha.cljs","^1G",19,"^1<",["^Z",[["^1H","~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",226,"^1B",["^6",["^1Z","^2J"]],"^1F",226,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","~$x"]]]]],"^19","Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a collection of problem-maps, where problem-map has at least :path :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."],"~$tuple-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1G",29,"^3G",["^ ","^1@",false,"^3H",3,"^1D",3,"^1<",["^Z",[["^3?","^3S"],["^3?","^3S","^13"]]],"^Y",["^Z",[["^3?","^3S"],["^3?","^3S","^13"]]],"^1>",["^Z",[null,null]]],"^1L",true,"^1?",19,"^1A",594,"^1F",594,"^Y",["^Z",["^[",["^Z",[["^3?","^3S"],["^3?","^3S","^13"]]]]],"^19","Do not call this directly, use 'tuple'"],"^=","~$cljs.spec.alpha/tuple-impl","^1:","out/cljs/spec/alpha.cljs","^1G",29,"^3G",["^ ","^1@",false,"^3H",3,"^1D",3,"^1<",["^Z",[["^3?","^3S"],["^3?","^3S","^13"]]],"^Y",["^Z",[["^3?","^3S"],["^3?","^3S","^13"]]],"^1>",["^Z",[null,null]]],"^1<",["^Z",[["^3?","^3S"],["^3?","^3S","^13"]]],"^1=",null,"^3H",3,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^2V",[["^ ","^3H",2,"^1@",false,"^1S","^1J"],["^ ","^3H",3,"^1@",false,"^1S","^2["]],"^1A",594,"^1F",594,"^1D",3,"^1E",true,"^Y",["^Z",[["^3?","^3S"],["^3?","^3S","^13"]]],"^19","Do not call this directly, use 'tuple'"],"~$multi-spec-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1G",34,"^3G",["^ ","^1@",false,"^3H",4,"^1D",4,"^1<",["^Z",[["^10","^11","^12"],["^10","^11","^12","^13"]]],"^Y",["^Z",[["^10","^11","^12"],["^10","^11","^12","^13"]]],"^1>",["^Z",[null,null]]],"^1L",true,"^1?",19,"^1A",544,"^1F",544,"^Y",["^Z",["^[",["^Z",[["^10","^11","^12"],["^10","^11","^12","^13"]]]]],"^19","Do not call this directly, use 'multi-spec'"],"^=","~$cljs.spec.alpha/multi-spec-impl","^1:","out/cljs/spec/alpha.cljs","^1G",34,"^3G",["^ ","^1@",false,"^3H",4,"^1D",4,"^1<",["^Z",[["^10","^11","^12"],["^10","^11","^12","^13"]]],"^Y",["^Z",[["^10","^11","^12"],["^10","^11","^12","^13"]]],"^1>",["^Z",[null,null]]],"^1<",["^Z",[["^10","^11","^12"],["^10","^11","^12","^13"]]],"^1=",null,"^3H",4,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^2V",[["^ ","^3H",3,"^1@",false,"^1S","^1J"],["^ ","^3H",4,"^1@",false,"^1S","^1C"]],"^1A",544,"^1F",544,"^1D",4,"^1E",true,"^Y",["^Z",[["^10","^11","^12"],["^10","^11","^12","^13"]]],"^19","Do not call this directly, use 'multi-spec'"],"~$conform",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",168,"^1?",7,"^1F",168,"^1G",14,"^Y",["^Z",["^[",["^Z",[["^1H","~$x"]]]]],"^19","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"^=","~$cljs.spec.alpha/conform","^1:","out/cljs/spec/alpha.cljs","^1G",14,"^1<",["^Z",[["^1H","~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",168,"^1B","^1J","^1F",168,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","~$x"]]]]],"^19","Given a spec and a value, returns :cljs.spec.alpha/invalid if value does\n  not match spec, else the (possibly destructured) value."],"~$->t_cljs$spec$alpha1052",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["~$keys->specnames","^5P","^5F","^5G","^13","^5I","^5H","^5R","^5J","^5K","~$map__1050","^5L","^14","^5M","^5N","^5T","~$k->s","^5O","~$meta1053"]]]]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1052.","^1:",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha1052","^1:","out/cljs/spec/alpha.cljs","^1<",["^Z",[["^85","^5P","^5F","^5G","^13","^5I","^5H","^5R","^5J","^5K","^86","^5L","^14","^5M","^5N","^5T","^87","^5O","^88"]]],"^1=",null,"^1>",["^Z",[null,null]],"^P",true,"^1?",5,"^1@",false,"^W","^X","^1A",430,"^1B","^31","^1D",19,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^85","^5P","^5F","^5G","^13","^5I","^5H","^5R","^5J","^5K","^86","^5L","^14","^5M","^5N","^5T","^87","^5O","^88"]]]]],"^V",["^6",["^S","^U"]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1052."],"~$->t_cljs$spec$alpha1214",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^3?","^3S","^13","~$meta1215"]]]]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1214.","^1:",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha1214","^1:","out/cljs/spec/alpha.cljs","^1<",["^Z",[["^3?","^3S","^13","^8;"]]],"^1=",null,"^1>",["^Z",[null,null]],"^P",true,"^1?",3,"^1@",false,"^W","^X","^1A",816,"^1B","^34","^1D",4,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^3?","^3S","^13","^8;"]]]]],"^V",["^6",["^S","^U"]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1214."],"^6T",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",43,"^1?",4,"^1F",43,"^1G",8,"^5C","^R","^19",null,"^Y",["^Z",["^[",["^Z",[["^1H","^6U","^2L","^5?"]]]]]],"^5C","^R","^=","~$cljs.spec.alpha/gen*","^1:","out/cljs/spec/alpha.cljs","^1G",8,"^1<",["^Z",[["^1H","^6U","^2L","^5?"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",39,"^1B","^1J","^1F",43,"^1D",4,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","^6U","^2L","^5?"]]]]],"^19",null],"~$fspec-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1339,"^1?",19,"^1F",1339,"^1G",29,"^1L",true,"^Y",["^Z",["^[",["^Z",[["~$argspec","~$aform","~$retspec","~$rform","~$fnspec","~$fform","^13"]]]]],"^19","Do not call this directly, use 'fspec'"],"^=","~$cljs.spec.alpha/fspec-impl","^1:","out/cljs/spec/alpha.cljs","^1G",29,"^1<",["^Z",[["^8?","^8@","^8A","^8B","^8C","^8D","^13"]]],"^1=",null,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1339,"^1B","^2Z","^1F",1339,"^1D",7,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^8?","^8@","^8A","^8B","^8C","^8D","^13"]]]]],"^19","Do not call this directly, use 'fspec'"],"~$inck",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",355,"^1?",8,"^1F",355,"^1G",12,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$m","~$k"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/inck","^1:","out/cljs/spec/alpha.cljs","^1G",12,"^1<",["^Z",[["~$m","~$k"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",355,"^1B",["^6",["^3A","^1J"]],"^1F",355,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$m","~$k"]]]]]],"~$t_cljs$spec$alpha1400",["^ ","^47",3,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^36","^1:","out/cljs/spec/alpha.cljs","^48",true,"^P",true,"^1?",3,"^1A",1294,"^49",false,"^1S","^4:","^V",["^6",["^S","^U"]]],"~$*coll-check-limit*",["^ ","^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",31,"^1?",16,"^1F",31,"^1G",34,"^1Q",true],"^=","~$cljs.spec.alpha/*coll-check-limit*","^1:","out/cljs/spec/alpha.cljs","^1G",34,"^1?",1,"^1Q",true,"^1A",31,"^1F",31,"^1S","^1T","^19","The number of items validated in a collection spec'ed with 'every'"],"~$get-spec",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",330,"^1?",7,"^1F",330,"^1G",15,"^Y",["^Z",["^[",["^Z",[["~$k"]]]]],"^19","Returns spec registered for keyword/symbol/var k, or nil."],"^=","~$cljs.spec.alpha/get-spec","^1:","out/cljs/spec/alpha.cljs","^1G",15,"^1<",["^Z",[["~$k"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",330,"^1B",["^6",["^1J","^2J"]],"^1F",330,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$k"]]]]],"^19","Returns spec registered for keyword/symbol/var k, or nil."],"~$gensub",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",282,"^1?",8,"^1F",282,"^1G",14,"^1X",true,"^Y",["^Z",["^[",["^Z",[["^1H","^6U","^2L","^5?","^10"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/gensub","^1:","out/cljs/spec/alpha.cljs","^1G",14,"^1<",["^Z",[["^1H","^6U","^2L","^5?","^10"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",282,"^1B","^1J","^1F",282,"^1D",5,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","^6U","^2L","^5?","^10"]]]]]],"~$t_cljs$spec$alpha1432",["^ ","^47",2,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^3;","^1:","out/cljs/spec/alpha.cljs","^48",true,"^P",true,"^1?",5,"^1A",1391,"^49",false,"^1S","^4:","^V",["^6",["^S","^U"]]],"~$the-spec",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",116,"^1?",8,"^1F",116,"^1G",16,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$spec-or-k"]]]]],"^19","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"^1X",true,"^=","~$cljs.spec.alpha/the-spec","^1:","out/cljs/spec/alpha.cljs","^1G",16,"^1<",["^Z",[["^8Q"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",116,"^1B",["^6",["^1J","^2J"]],"^1F",116,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^8Q"]]]]],"^19","spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"],"~$coll-prob",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",793,"^1?",8,"^1F",793,"^1G",17,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$x","^2;","~$kform","^2:","^2=","^2>","^20","^2L","^2M","^2N"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/coll-prob","^1:","out/cljs/spec/alpha.cljs","^1G",17,"^1<",["^Z",[["~$x","^2;","^8T","^2:","^2=","^2>","^20","^2L","^2M","^2N"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",793,"^1B",["^6",["^2Q","^1J","^2J"]],"^1F",793,"^1D",10,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$x","^2;","^8T","^2:","^2=","^2>","^20","^2L","^2M","^2N"]]]]]],"~$every-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1G",29,"^3G",["^ ","^1@",false,"^3H",4,"^1D",4,"^1<",["^Z",[["^10","^1M","^2?"],["^10","^1M",["^ ","^2C","~:into","^29","~:cljs.spec.alpha/describe","^54",["^2@","~:cljs.spec.alpha/kind-form","^2=","^20","^2>","^2:","^22","~:cljs.spec.alpha/kfn","~:cljs.spec.alpha/cpred","^24","~:cljs.spec.alpha/conform-all"],"~:or",["^ ","^22",20],"^5Q","^2?"],"^13"]]],"^Y",["^Z",[["^10","^1M","^2?"],["^10","^1M",["^ ","^2C","^8W","^29","^8X","^54",["^2@","^8Y","^2=","^20","^2>","^2:","^22","^8Z","^8[","^24","^90"],"^91",["^ ","^22",20],"^5Q","^2?"],"^13"]]],"^1>",["^Z",[null,null]]],"^1L",true,"^1?",19,"^1A",843,"^1F",843,"^Y",["^Z",["^[",["^Z",[["^10","^1M","^2?"],["^10","^1M",["^ ","^2C","^8W","^29","^8X","^54",["^2@","^8Y","^2=","^20","^2>","^2:","^22","^8Z","^8[","^24","^90"],"^91",["^ ","^22",20],"^5Q","^2?"],"^13"]]]]],"^19","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"],"^=","~$cljs.spec.alpha/every-impl","^1:","out/cljs/spec/alpha.cljs","^1G",29,"^3G",["^ ","^1@",false,"^3H",4,"^1D",4,"^1<",["^Z",[["^10","^1M","^2?"],["^10","^1M",["^ ","^2C","^8W","^29","^8X","^54",["^2@","^8Y","^2=","^20","^2>","^2:","^22","^8Z","^8[","^24","^90"],"^91",["^ ","^22",20],"^5Q","^2?"],"^13"]]],"^Y",["^Z",[["^10","^1M","^2?"],["^10","^1M",["^ ","^2C","^8W","^29","^8X","^54",["^2@","^8Y","^2=","^20","^2>","^2:","^22","^8Z","^8[","^24","^90"],"^91",["^ ","^22",20],"^5Q","^2?"],"^13"]]],"^1>",["^Z",[null,null]]],"^1<",["^Z",[["^10","^1M","^2?"],["^10","^1M",["^ ","^2C","^8W","^29","^8X","^54",["^2@","^8Y","^2=","^20","^2>","^2:","^22","^8Z","^8[","^24","^90"],"^91",["^ ","^22",20],"^5Q","^2?"],"^13"]]],"^1=",null,"^3H",4,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^2V",[["^ ","^3H",3,"^1@",false,"^1S","^1J"],["^ ","^3H",4,"^1@",false,"^1S","^2F"]],"^1A",843,"^1F",843,"^1D",4,"^1E",true,"^Y",["^Z",[["^10","^1M","^2?"],["^10","^1M",["^ ","^2C","^8W","^29","^8X","^54",["^2@","^8Y","^2=","^20","^2>","^2:","^22","^8Z","^8[","^24","^90"],"^91",["^ ","^22",20],"^5Q","^2?"],"^13"]]],"^19","Do not call this directly, use 'every', 'every-kv', 'coll-of' or 'map-of'"],"~$accept-nil?",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1060,"^1?",8,"^1F",1060,"^1G",19,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$p"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/accept-nil?","^1:","out/cljs/spec/alpha.cljs","^1G",19,"^1<",["^Z",[["~$p"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1060,"^1B",["^6",["^3J","^1J","^2J"]],"^1F",1060,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$p"]]]]]],"~$maybe-spec",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",105,"^1?",8,"^1F",105,"^1G",18,"^1X",true,"^Y",["^Z",["^[",["^Z",[["^8Q"]]]]],"^19","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"^1X",true,"^=","~$cljs.spec.alpha/maybe-spec","^1:","out/cljs/spec/alpha.cljs","^1G",18,"^1<",["^Z",[["^8Q"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",105,"^1B",["^6",[null,"^3A","^1J","^32","^3:","^6:","^2J"]],"^1F",105,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^8Q"]]]]],"^19","spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."],"~$->t_cljs$spec$alpha1200",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U"]],"^V",["^6",["^S","^U"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^3?","^3S","^13","^3U","^3V","~$meta1201"]]]]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1200.","^1:",null],"^Q",["^6",["^R","^S","^T","^U"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha1200","^1:","out/cljs/spec/alpha.cljs","^1<",["^Z",[["^3?","^3S","^13","^3U","^3V","^98"]]],"^1=",null,"^1>",["^Z",[null,null]],"^P",true,"^1?",5,"^1@",false,"^W","^X","^1A",780,"^1B","^30","^1D",6,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^3?","^3S","^13","^3U","^3V","^98"]]]]],"^V",["^6",["^S","^U"]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1200."],"~$spec-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1G",28,"^3G",["^ ","^1@",false,"^3H",5,"^1D",5,"^1<",["^Z",[["^10","^1M","^13","^5["],["^10","^1M","^13","^5[","^60"]]],"^Y",["^Z",[["^10","^1M","^13","^5["],["^10","^1M","^13","^5[","^60"]]],"^1>",["^Z",[null,null]]],"^1L",true,"^1?",19,"^1A",511,"^1F",511,"^Y",["^Z",["^[",["^Z",[["^10","^1M","^13","^5["],["^10","^1M","^13","^5[","^60"]]]]],"^19","Do not call this directly, use 'spec'"],"^=","~$cljs.spec.alpha/spec-impl","^1:","out/cljs/spec/alpha.cljs","^1G",28,"^3G",["^ ","^1@",false,"^3H",5,"^1D",5,"^1<",["^Z",[["^10","^1M","^13","^5["],["^10","^1M","^13","^5[","^60"]]],"^Y",["^Z",[["^10","^1M","^13","^5["],["^10","^1M","^13","^5[","^60"]]],"^1>",["^Z",[null,null]]],"^1<",["^Z",[["^10","^1M","^13","^5["],["^10","^1M","^13","^5[","^60"]]],"^1=",null,"^3H",5,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^2V",[["^ ","^3H",4,"^1@",false,"^1S","^1J"],["^ ","^3H",5,"^1@",false,"^1S",["^6",[null,"^3A","^1J","^33","^2J"]]]],"^1A",511,"^1F",511,"^1D",5,"^1E",true,"^Y",["^Z",[["^10","^1M","^13","^5["],["^10","^1M","^13","^5[","^60"]]],"^19","Do not call this directly, use 'spec'"],"~$invalid?",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",163,"^1?",7,"^1F",163,"^1G",15,"^Y",["^Z",["^[",["^Z",[["^3C"]]]]],"^19","tests the validity of a conform return value"],"^=","~$cljs.spec.alpha/invalid?","^1:","out/cljs/spec/alpha.cljs","^1G",15,"^1<",["^Z",[["^3C"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",163,"^1B","^3J","^1F",163,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^3C"]]]]],"^19","tests the validity of a conform return value"],"~$amp-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1015,"^1?",19,"^1F",1015,"^1G",27,"^1L",true,"^Y",["^Z",["^[",["^Z",[["^40","~$re-form","^3S","^5O"]]]]],"^19","Do not call this directly, use '&'"],"^=","~$cljs.spec.alpha/amp-impl","^1:","out/cljs/spec/alpha.cljs","^1G",27,"^1<",["^Z",[["^40","^9?","^3S","^5O"]]],"^1=",null,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1015,"^1B","^1Z","^1F",1015,"^1D",4,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^40","^9?","^3S","^5O"]]]]],"^19","Do not call this directly, use '&'"],"~$pcat*",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",982,"^1?",8,"^1F",982,"^1G",13,"^1X",true,"^Y",["^Z",["^[",["^Z",[[["~#cmap",[["^4M","~$&","~$pr","^5Q","^3>"],"~:ps",["~$k1","~$&","~$kr","^5Q","^3="],"~:ks",["~$f1","~$&","~$fr","^5Q","^3?"],"~:forms","^3C","~:ret","~$rep+","~:rep+"]]]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/pcat*","^1:","out/cljs/spec/alpha.cljs","^1G",13,"^1<",["^Z",[["~$p__1278"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",982,"^1B",["^6",["^1J","^1Z","^2J"]],"^1F",982,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[[["^9B",[["^4M","~$&","^9C","^5Q","^3>"],"^9D",["^9E","~$&","^9F","^5Q","^3="],"^9G",["^9H","~$&","^9I","^5Q","^3?"],"^9J","^3C","^9K","^9L","^9M"]]]]]]]],"~$alt*",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1029,"^1?",8,"^1F",1029,"^1G",12,"^1X",true,"^Y",["^Z",["^[",["^Z",[["^3>","^3=","^3?"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/alt*","^1:","out/cljs/spec/alpha.cljs","^1G",12,"^1<",["^Z",[["^3>","^3=","^3?"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1029,"^1B",["^6",["^1J","^1Z","^2J"]],"^1F",1029,"^1D",3,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^3>","^3=","^3?"]]]]]],"~$cat-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",994,"^1?",19,"^1F",994,"^1G",27,"^1L",true,"^Y",["^Z",["^[",["^Z",[["^3=","^3>","^3?"]]]]],"^19","Do not call this directly, use 'cat'"],"^=","~$cljs.spec.alpha/cat-impl","^1:","out/cljs/spec/alpha.cljs","^1G",27,"^1<",["^Z",[["^3=","^3>","^3?"]]],"^1=",null,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",994,"^1B",["^6",["^1J","^1Z","^2J"]],"^1F",994,"^1D",3,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^3=","^3>","^3?"]]]]],"^19","Do not call this directly, use 'cat'"],"~$macroexpand-check",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",337,"^1?",8,"^1F",337,"^1G",25,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$v","~$args"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/macroexpand-check","^1:","out/cljs/spec/alpha.cljs","^1G",25,"^1<",["^Z",[["~$v","^9U"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",337,"^1B","^2J","^1F",337,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$v","^9U"]]]]]],"~$reg-resolve",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",55,"^1?",8,"^1F",55,"^1G",19,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$k"]]]]],"^19","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"^1X",true,"^=","~$cljs.spec.alpha/reg-resolve","^1:","out/cljs/spec/alpha.cljs","^1G",19,"^1<",["^Z",[["~$k"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",55,"^1B",["^6",[null,"^1J","^2J"]],"^1F",55,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$k"]]]]],"^19","returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not ident"],"~$explain-str",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",275,"^1?",7,"^1F",275,"^1G",18,"^Y",["^Z",["^[",["^Z",[["^1H","~$x"]]]]],"^19","Given a spec and a value that fails to conform, returns an explanation as a string."],"^=","~$cljs.spec.alpha/explain-str","^1:","out/cljs/spec/alpha.cljs","^1G",18,"^1<",["^Z",[["^1H","~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",275,"^1B","~$string","^1F",275,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","~$x"]]]]],"^19","Given a spec and a value that fails to conform, returns an explanation as a string."],"~$*compile-asserts*",["^ ","^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1474,"^1?",3,"^1F",1474,"^1G",20,"^1Q",true,"^19","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"^=","~$cljs.spec.alpha/*compile-asserts*","^1:","out/cljs/spec/alpha.cljs","^1G",20,"^1?",1,"^1Q",true,"^1A",1467,"^1F",1474,"^1S","^3J","^19","If true, compiler will enable spec asserts, which are then\nsubject to runtime control via check-asserts? If false, compiler\nwill eliminate all spec assert overhead. See 'assert'.\nInitially set to the negation of the ':elide-asserts' compiler option.\nDefaults to true."],"~$with-gen",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",211,"^1?",7,"^1F",211,"^1G",15,"^Y",["^Z",["^[",["^Z",[["^1H","~$gen-fn"]]]]],"^19","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^=","~$cljs.spec.alpha/with-gen","^1:","out/cljs/spec/alpha.cljs","^1G",15,"^1<",["^Z",[["^1H","^:3"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",211,"^1B",["^6",["^3A","^1J"]],"^1F",211,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","^:3"]]]]],"^19","Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"],"^6Q",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",40,"^1?",4,"^1F",40,"^1G",12,"^5C","^R","^19",null,"^Y",["^Z",["^[",["^Z",[["^1H","~$x"]]]]]],"^5C","^R","^=","~$cljs.spec.alpha/conform*","^1:","out/cljs/spec/alpha.cljs","^1G",12,"^1<",["^Z",[["^1H","~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",39,"^1B","^1J","^1F",40,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","~$x"]]]]],"^19",null],"~$check-asserts?",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1482,"^1?",16,"^1F",1482,"^1G",30,"^1S","^3J","^Y",["^Z",["^[",["^Z",[[]]]]],"^19","Returns the value set by check-asserts."],"^=","~$cljs.spec.alpha/check-asserts?","^1:","out/cljs/spec/alpha.cljs","^1G",30,"^1<",["^Z",[[]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1482,"^1B","^3J","^1F",1482,"^1D",0,"^1S","^3J","^1E",true,"^Y",["^Z",["^[",["^Z",[[]]]]],"^19","Returns the value set by check-asserts."],"~$noret?",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1052,"^1?",8,"^1F",1052,"^1G",14,"^1X",true,"^Y",["^Z",["^[",["^Z",[["^4M","~$pret"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/noret?","^1:","out/cljs/spec/alpha.cljs","^1G",14,"^1<",["^Z",[["^4M","^:9"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1052,"^1B",["^6",["^3J","^1J","^2J"]],"^1F",1052,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^4M","^:9"]]]]]],"~$rep-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1006,"^1?",19,"^1F",1006,"^1G",27,"^1L",true,"^Y",["^Z",["^[",["^Z",[["^10","~$p"]]]]],"^19","Do not call this directly, use '*'"],"^=","~$cljs.spec.alpha/rep-impl","^1:","out/cljs/spec/alpha.cljs","^1G",27,"^1<",["^Z",[["^10","~$p"]]],"^1=",null,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1006,"^1B",["^6",["^3A","^1J","^2J"]],"^1F",1006,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^10","~$p"]]]]],"^19","Do not call this directly, use '*'"],"~$t_cljs$spec$alpha1142",["^ ","^47",9,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^37","^1:","out/cljs/spec/alpha.cljs","^48",true,"^P",true,"^1?",5,"^1A",697,"^49",false,"^1S","^4:","^V",["^6",["^S","^U"]]],"~$t_cljs$spec$alpha1052",["^ ","^47",19,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^31","^1:","out/cljs/spec/alpha.cljs","^48",true,"^P",true,"^1?",5,"^1A",430,"^49",false,"^1S","^4:","^V",["^6",["^S","^U"]]],"~$t_cljs$spec$alpha1407",["^ ","^47",9,"^Q",["^6",["^R","^S","^T","^U","~$cljs.core/ILookup"]],"^=","^2Z","^1:","out/cljs/spec/alpha.cljs","^48",true,"^P",true,"^1?",5,"^1A",1343,"^49",false,"^1S","^4:","^V",["^6",["^S","^U","^:@"]]],"~$op-describe",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1143,"^1?",8,"^1F",1143,"^1G",19,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$p"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/op-describe","^1:","out/cljs/spec/alpha.cljs","^1G",19,"^1<",["^Z",[["~$p"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1143,"^1B",["^6",[null,"^3A","^1J","^2J"]],"^1F",1143,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$p"]]]]]],"~$describe",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",206,"^1?",7,"^1F",206,"^1G",15,"^Y",["^Z",["^[",["^Z",[["^1H"]]]]],"^19","returns an abbreviated description of the spec as data"],"^=","~$cljs.spec.alpha/describe","^1:","out/cljs/spec/alpha.cljs","^1G",15,"^1<",["^Z",[["^1H"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",206,"^1B",["^6",[null,"^1J","^3:"]],"^1F",206,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H"]]]]],"^19","returns an abbreviated description of the spec as data"],"~$explain-1",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",387,"^1?",8,"^1F",387,"^1G",17,"^1X",true,"^Y",["^Z",["^[",["^Z",[["^10","^1M","^2L","^2M","^2N","~$v"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/explain-1","^1:","out/cljs/spec/alpha.cljs","^1G",17,"^1<",["^Z",[["^10","^1M","^2L","^2M","^2N","~$v"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",387,"^1B",["^6",["^2Q","^1J"]],"^1F",387,"^1D",6,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^10","^1M","^2L","^2M","^2N","~$v"]]]]]],"~$explain-out",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",264,"^1?",7,"^1F",264,"^1G",18,"^Y",["^Z",["^[",["^Z",[["^2H"]]]]],"^19","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"^=","~$cljs.spec.alpha/explain-out","^1:","out/cljs/spec/alpha.cljs","^1G",18,"^1<",["^Z",[["^2H"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",264,"^1B","^1J","^1F",264,"^1D",1,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^2H"]]]]],"^19","Prints explanation data (per 'explain-data') to *out* using the printer in *explain-out*,\n    by default explain-printer."],"~$re-gen",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1214,"^1?",8,"^1F",1214,"^1G",14,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$p","^6U","^2L","^5?","~$f"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/re-gen","^1:","out/cljs/spec/alpha.cljs","^1G",14,"^1<",["^Z",[["~$p","^6U","^2L","^5?","~$f"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1214,"^1B",["^6",["^1J","^2J"]],"^1F",1214,"^1D",5,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$p","^6U","^2L","^5?","~$f"]]]]]],"~$t_cljs$spec$alpha1133",["^ ","^47",6,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^2[","^1:","out/cljs/spec/alpha.cljs","^48",true,"^P",true,"^1?",6,"^1A",600,"^49",false,"^1S","^4:","^V",["^6",["^S","^U"]]],"~$filter-alt",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1020,"^1?",8,"^1F",1020,"^1G",18,"^1X",true,"^Y",["^Z",["^[",["^Z",[["^3>","^3=","^3?","~$f"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/filter-alt","^1:","out/cljs/spec/alpha.cljs","^1G",18,"^1<",["^Z",[["^3>","^3=","^3?","~$f"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1020,"^1B","^2Q","^1F",1020,"^1D",4,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^3>","^3=","^3?","~$f"]]]]]],"~$t_cljs$spec$alpha1200",["^ ","^47",6,"^Q",["^6",["^R","^S","^T","^U"]],"^=","^30","^1:","out/cljs/spec/alpha.cljs","^48",true,"^P",true,"^1?",5,"^1A",780,"^49",false,"^1S","^4:","^V",["^6",["^S","^U"]]],"~$and-preds",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",726,"^1?",8,"^1F",726,"^1G",17,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$x","^3S","^3?"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/and-preds","^1:","out/cljs/spec/alpha.cljs","^1G",17,"^1<",["^Z",[["~$x","^3S","^3?"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",726,"^1B",["^6",[null,"^32"]],"^1F",726,"^1D",3,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$x","^3S","^3?"]]]]]],"~$call-valid?",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1318,"^1?",8,"^1F",1318,"^1G",19,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$f","^3U","^9U"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/call-valid?","^1:","out/cljs/spec/alpha.cljs","^1G",19,"^1<",["^Z",[["~$f","^3U","^9U"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1318,"^1B",["^6",["^3J","^2J"]],"^1F",1318,"^1D",3,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$f","^3U","^9U"]]]]]],"~$op-unform",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1089,"^1?",8,"^1F",1089,"^1G",17,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$p","~$x"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/op-unform","^1:","out/cljs/spec/alpha.cljs","^1G",17,"^1<",["^Z",[["~$p","~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1089,"^1B",["^6",["^2Q","^1J"]],"^1F",1089,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$p","~$x"]]]]]],"~$rep*",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",999,"^1?",8,"^1F",999,"^1G",12,"^1X",true,"^Y",["^Z",["^[",["^Z",[["^4M","^4N","^3C","~$splice","^10"]]]]]],"^1X",true,"^=","~$cljs.spec.alpha/rep*","^1:","out/cljs/spec/alpha.cljs","^1G",12,"^1<",["^Z",[["^4M","^4N","^3C","^:V","^10"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",999,"^1B",["^6",["^3A","^1J","^2J"]],"^1F",999,"^1D",5,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^4M","^4N","^3C","^:V","^10"]]]]]],"^2W",["^ ","^N",null,"^O",["^ ","^5C","^T","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1G",12,"^3G",["^ ","^1@",false,"^3H",2,"^1D",2,"^1<",["^Z",[["~$_"],["~$_","^10"]]],"^Y",["^Z",[["~$_"],["~$_","^10"]]],"^1>",["^Z",[null,null]]],"^1?",4,"^1A",132,"^1F",132,"^Y",["^Z",["^[",["^Z",[["~$_"],["~$_","^10"]]]]],"^19",null],"^5C","^T","^=","~$cljs.spec.alpha/specize*","^1:","out/cljs/spec/alpha.cljs","^1G",12,"^3G",["^ ","^1@",false,"^3H",2,"^1D",2,"^1<",["^Z",[["~$_"],["~$_","^10"]]],"^Y",["^Z",[["~$_"],["~$_","^10"]]],"^1>",["^Z",[null,null]]],"^1<",["^Z",[["~$_"],["~$_","^10"]]],"^1=",null,"^3H",2,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^2V",[["^ ","^3H",1,"^1@",false,"^1S","^1J"],["^ ","^3H",2,"^1@",false,"^1S","^1J"]],"^1A",131,"^1F",132,"^1D",2,"^1E",true,"^Y",["^Z",[["~$_"],["~$_","^10"]]],"^19",null],"~$maybe-impl",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1048,"^1?",19,"^1F",1048,"^1G",29,"^1L",true,"^Y",["^Z",["^[",["^Z",[["~$p","^10"]]]]],"^19","Do not call this directly, use '?'"],"^=","~$cljs.spec.alpha/maybe-impl","^1:","out/cljs/spec/alpha.cljs","^1G",29,"^1<",["^Z",[["~$p","^10"]]],"^1=",null,"^1L",true,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1048,"^1B",["^6",["^3A","^1J"]],"^1F",1048,"^1D",2,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$p","^10"]]]]],"^19","Do not call this directly, use '?'"],"~$pcat",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",992,"^1?",8,"^1F",992,"^1G",12,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$&","^3>"]]]]],"^3G",["^ ","^1@",true,"^3H",0,"^1D",0,"^1<",[["^Z",["^3>"]]],"^Y",["^Z",[["~$&","^3>"]]],"^1>",["^Z",[null]]]],"^1X",true,"^=","~$cljs.spec.alpha/pcat","^1:","out/cljs/spec/alpha.cljs","^1G",12,"^3G",["^ ","^1@",true,"^3H",0,"^1D",0,"^1<",[["^Z",["^3>"]]],"^Y",["^Z",[["~$&","^3>"]]],"^1>",["^Z",[null]]],"^1<",[["^Z",["^3>"]]],"^1=",null,"^3H",0,"^1>",["^Z",[null]],"^1?",1,"^1@",true,"^2V",[["^ ","^3H",0,"^1@",true,"^1S",["^6",["^1J","^1Z","^2J"]]]],"^1A",992,"^1B","^1J","^1F",992,"^1D",0,"^1E",true,"^Y",["^Z",[["~$&","^3>"]]]],"^6S",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",42,"^1?",4,"^1F",42,"^1G",12,"^5C","^R","^19",null,"^Y",["^Z",["^[",["^Z",[["^1H","^2L","^2M","^2N","~$x"]]]]]],"^5C","^R","^=","~$cljs.spec.alpha/explain*","^1:","out/cljs/spec/alpha.cljs","^1G",12,"^1<",["^Z",[["^1H","^2L","^2M","^2N","~$x"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",39,"^1B","^1J","^1F",42,"^1D",5,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^1H","^2L","^2M","^2N","~$x"]]]]],"^19",null],"~$validate-fn",["^ ","^N",null,"^O",["^ ","^1:","/Users/Lewis/git/books/living-clojure/cheshire-cat/out/cljs/spec/alpha.cljs","^1A",1329,"^1?",8,"^1F",1329,"^1G",19,"^1X",true,"^Y",["^Z",["^[",["^Z",[["~$f","^3U","~$iters"]]]]],"^19","returns f if valid, else smallest"],"^1X",true,"^=","~$cljs.spec.alpha/validate-fn","^1:","out/cljs/spec/alpha.cljs","^1G",19,"^1<",["^Z",[["~$f","^3U","^;3"]]],"^1=",null,"^1>",["^Z",[null,null]],"^1?",1,"^1@",false,"^1A",1329,"^1B",["^6",[null,"^1J","^2J"]],"^1F",1329,"^1D",3,"^1E",true,"^Y",["^Z",["^[",["^Z",[["~$f","^3U","^;3"]]]]],"^19","returns f if valid, else smallest"],"~$->t_cljs$spec$alpha1407",["^ ","^N",null,"^O",["^ ","^P",true,"^Q",["^6",["^R","^S","^T","^U","^:@"]],"^V",["^6",["^S","^U","^:@"]],"^W","^X","^Y",["^Z",["^[",["^Z",[["^8?","^8@","^8A","^8B","^8C","^8D","^13","^3U","~$meta1408"]]]]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1407.","^1:",null],"^Q",["^6",["^R","^S","^T","^U","^:@"]],"^=","~$cljs.spec.alpha/->t_cljs$spec$alpha1407","^1:","out/cljs/spec/alpha.cljs","^1<",["^Z",[["^8?","^8@","^8A","^8B","^8C","^8D","^13","^3U","^;6"]]],"^1=",null,"^1>",["^Z",[null,null]],"^P",true,"^1?",5,"^1@",false,"^W","^X","^1A",1343,"^1B","^2Z","^1D",9,"^1E",true,"^Y",["^Z",["^[",["^Z",[["^8?","^8@","^8A","^8B","^8C","^8D","^13","^3U","^;6"]]]]],"^V",["^6",["^S","^U","^:@"]],"^19","Positional factory function for cljs.spec.alpha/t_cljs$spec$alpha1407."]],"~:cljs.spec/registry-ref",[["~:cljs.spec.alpha/kvs->map",["^Z",["~$cljs.spec.alpha/conformer",["^Z",["~$fn*",["~$p1__1426#"],["^Z",["~$cljs.core/zipmap",["^Z",["~$cljs.core/map","~:cljs.spec.alpha/k","^;<"]],["^Z",["^;>","~:cljs.spec.alpha/v","^;<"]]]]]],["^Z",["^;;",["~$p1__1427#"],["^Z",["^;>",["^Z",["~$cljs.core/fn",[["~$k","~$v"]],["^ ","^;?","~$k","^;@","~$v"]]],"^;A"]]]]]]]],"~:require-macros",["^ ","~$c","^A","^A","^A","~$s","^>","^>","^>","^F","^G","^G","^G"],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["^10","^17","^20","~:args","~:cljs.spec.alpha/failure","~$cljs.spec.alpha/*","~:max-tries","~:path","~:req-un","~:opt-un","^60","~$cljs.spec.alpha/+","~:p2","^9K","~:cljs.spec.alpha/unknown","~$cljs.core/sequential?","~:cljs.spec.alpha/value","~:gfn","~:cljs.spec.alpha/recursion-limit","~:cljs.spec.alpha/name","^3W","~:pred-exprs","^8W","~:keys-pred","~:gen-max","^98","~:shrunk","~:fn","~$cljs.spec.alpha/alt","~$cljs.core/vector?","^15","^9M","~$cljs.core/=","~:opt-keys","^8@","^85","^61","~:cljs.spec.alpha/rep","~:pred","^16","~:splice","^21","^3?","^5P","~:cljs.spec.alpha/accept","^8?","~:else","^9G","~$cljs.core/count","~$cljs.spec.alpha/and","^5F","^5G","~$cljs.spec.alpha/cat","~:_","^8Y","~:maybe","~:via","~$cljs.spec.alpha/every","~:req-specs","~$cljs.spec.alpha/or","^13","~:cljs.spec.alpha/gfn","^22","^8;","^88","^8C","~$v","~:cljs.spec.alpha/spec","^5I","~:conform-keys","^5H","^18","^5[","~$cljs.spec.alpha/fspec","^5R","~$fn","~:amp","^4D","^8D","^55","~$cljs.spec.alpha/nilable","^5J","^;@","~$cljs.spec.alpha/tuple","^1M","~$cljs.core/map?","^8[","~:p1","^;=","~:cljs.spec.alpha/problems","^23","~$%","^;>","^;9","~$method","~:distinct","^6F","^5K","^8","^;<","~$cljs.spec.alpha/keys","^40","^24","^3T","~:reason","~$cljs.spec.alpha/merge","~:cljs.spec.alpha/invalid","^3S","^25","~:req","^26","^27","^28","~$nil?","~:assertion-failed","^;;","^6[","~$cljs.core/<=","^74","^;6","^3P","~:cljs.spec.alpha/amp","~:id","^29","~:min-count","~:kind","~:smallest","^86","~$cljs.core/set?","~:count","^6E","~$cljs.core/nil?","^11","~:req-keys","^12","~$k","^;?","^;B","^5V","~$cljs.core/list?","^2:","^8A","~:opt-specs","~:cljs.spec.alpha/args","^8B","~$ifn?","~:pred-forms","^5L","^1H","^:","~$distinct?","~:max-count","^2;","^8Z","~:max-elements","^2<","^2D","~$cljs.spec.alpha/multi-spec","~$cljs.core/coll?","^14","~:num-elements","^3U","^2=","^5M","~$apply","^2>","^2?","^2@","^3V","~:min-elements","^;A","^5N","^2A","^90","^5T","~:cljs.spec.alpha/alt","~$cljs.core/or","^2B","^9J","~:cljs.spec.alpha/pred","^;","~:cljs.spec.alpha/nil","^9D","^87","^;:","~:in","^8X","^2C","~:accept","~$cljs.spec.alpha/&","~:opt","~:cljs.spec.alpha/pcat","^5O","~$cljs.spec.alpha/?"]],"~:order",["^55","^;T","^;O","^<O","^<C","~~:_","^=G","^;Z","^=C","^;B","^=?","^<[","^;P","^40","^6[","^;Y","^<X","^;X","^=<","^=4","^<B","^8?","^8@","^8A","^8B","^8C","^8D","^;6","^;9","^;:","^;;","^;<","^;=","^;>","^;?","^;@","^;A","~$k","~$v","^74","^3P","^=@","^<Q","^<E","^5V","^;G","^<R"]],"^19",null]